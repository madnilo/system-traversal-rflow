/**
 * FlowDiagram Component
 * Generated by Roo
 *
 * This component demonstrates a simple flow diagram using @xyflow/react.
 * It creates a basic diagram with nodes and edges that can be interacted with.
 */
"use client";

import { useAddNode } from "@/utils/useAddNode";
import { useAutoLayoutMethod } from "@/utils/useAutoLayoutMethod";
import { useFitViewMethod } from "@/utils/useFitViewMethod";
import {
  ArrowPathRoundedSquareIcon,
  ArrowsPointingOutIcon,
  SquaresPlusIcon,
  XMarkIcon,
} from "@heroicons/react/24/outline";
import {
  addEdge,
  Background,
  BackgroundVariant,
  Connection,
  ConnectionMode,
  Panel,
  ReactFlow,
  useEdgesState,
  useNodesState,
} from "@xyflow/react";
import "@xyflow/react/dist/style.css";
import { useCallback, useState } from "react";
import { initialEdges, initialNodes } from "./initialElements";
import LabeledGroupNodeDemo from "./nodes/LabeledGroupNodeDemo";
import SystemNode from "./nodes/SystemNode";

const nodeTypes = {
  system: SystemNode,
  labeledGroupNode: LabeledGroupNodeDemo,
};

export default function FlowDiagram() {
  // Use the hooks to manage nodes and edges
  const [addingNode, toggleAddingNode] = useState(false);
  const [nodeName, setNodeName] = useState("");
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const { fitView } = useFitViewMethod();
  // useAutoLayout();
  const { refreshLayout } = useAutoLayoutMethod();

  // Handle new connections between nodes
  const onConnect = useCallback(
    (params: Connection) => {
      console.log(params);
      setEdges((eds) => addEdge(params, eds));
    },
    [setEdges]
  );

  const { addNode } = useAddNode();

  return (
    <div style={{ width: "100%", height: "600px" }}>
      <ReactFlow
        nodes={nodes}
        nodeTypes={nodeTypes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        connectionMode={ConnectionMode.Loose}
        onInit={(i) => {
          i.zoomTo(-4).then(() => {
            refreshLayout();
          });
        }}
        fitView
      >
        {/* <Controls className="bg-background-panel text-foreground-text" /> */}
        {/* <MiniMap className="bg-background-panel" /> */}

        <Background variant={BackgroundVariant.Dots} gap={12} size={1} />

        <Panel
          position="top-right"
          className="bg-background-panel p-2 rounded-md shadow-md"
        >
          <div className="flex gap-2">
            <div>
              {addingNode && (
                <input
                  type="text"
                  autoFocus
                  value={nodeName}
                  onChange={(e) => setNodeName(e.target.value)}
                  onKeyUp={(e) => {
                    if (e.key === "Enter") {
                      addNode(nodeName);
                      toggleAddingNode(false);
                      setNodeName("");
                    }
                    if (e.key === "Escape") {
                      setNodeName("");
                      toggleAddingNode(false);
                    }
                  }}
                  placeholder="System Name -> 'ENTER'"
                  className="px-2 py-1 border rounded mr-2 h-8"
                />
              )}
              <button
                className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
                onClick={() => toggleAddingNode(!addingNode)}
              >
                {!addingNode ? (
                  <SquaresPlusIcon className="size-6 text-foreground-text inline-block" />
                ) : (
                  <XMarkIcon className="size-6 text-foreground-text inline-block" />
                )}
              </button>
            </div>

            <button
              onClick={refreshLayout}
              className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
            >
              <ArrowPathRoundedSquareIcon className="size-6 text-foreground-text inline-block" />
            </button>
            <button
              onClick={fitView}
              className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
            >
              <ArrowsPointingOutIcon className="size-6 text-foreground-text inline-block" />
            </button>
          </div>
        </Panel>
      </ReactFlow>
    </div>
  );
}

/**
 * FlowDiagram Component
 * Generated by Roo
 *
 * This component demonstrates a simple flow diagram using @xyflow/react.
 * It creates a basic diagram with nodes and edges that can be interacted with.
 */
"use client";

import { useAnimate } from "@/utils/useAnimate";
import { useLayoutedElements } from "@/utils/useLayoutedElements";
import {
  addEdge,
  Background,
  BackgroundVariant,
  Connection,
  ConnectionMode,
  Controls,
  MiniMap,
  Node,
  Panel,
  ReactFlow,
  useEdgesState,
  useNodesState,
  useReactFlow,
} from "@xyflow/react";
import "@xyflow/react/dist/style.css";
import { useCallback, useEffect, useState } from "react";
import SystemNode from "./SystemNode";
import { initialEdges, initialNodes } from "./initialElements";
const nodeTypes = {
  system: SystemNode,
};

export default function FlowDiagram() {
  // Use the hooks to manage nodes and edges
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
  const [nodeName, setNodeName] = useState("");

  const { getLayoutedElements } = useLayoutedElements();

  const instance = useReactFlow();
  console.log(instance.getNodes());
  const { animate } = useAnimate({ instance });

  // Handle new connections between nodes
  const onConnect = useCallback(
    (params: Connection) => {
      console.log(params);
      setEdges((eds) => addEdge(params, eds));
    },
    [setEdges]
  );

  useEffect(() => {
    console.log("Nodes changed:", nodes);
  }, [nodes]);

  // Add a new node to the diagram
  const addNode = useCallback(() => {
    if (!nodeName) return;

    const newNode: Node = {
      id: `${nodes.length + 1}`,
      data: { label: nodeName },
      position: {
        x: Math.random() * 500,
        y: Math.random() * 500,
      },
      style: {
        background: "#ff9900",
        color: "white",
        border: "1px solid #cc7a00",
        borderRadius: "8px",
        padding: "10px",
      },
    };

    setNodes((prev) => [...prev, newNode]);
    const { nodes: layoutedNodes } = getLayoutedElements({
      nodes,
      edges,
      direction: "TB",
    });
    layoutedNodes.map((node) =>
      animate({
        nodeId: node.id,
        position: {
          x: node.position.x,
          y: node.position.y,
        },
        duration: 400,
      })
    );

    setNodeName("");
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [animate, edges, getLayoutedElements, nodeName]);

  return (
    <div style={{ width: "100%", height: "600px" }}>
      <ReactFlow
        nodes={nodes}
        nodeTypes={nodeTypes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        connectionMode={ConnectionMode.Loose}
      >
        <Controls className="bg-background-panel text-foreground-text" />
        <MiniMap className="bg-background-panel" />
        <Background variant={BackgroundVariant.Dots} gap={12} size={1} />

        <Panel
          position="top-right"
          className="bg-background-panel p-4 rounded-md shadow-md"
        >
          <h3 className="text-lg font-bold mb-2">Add Node</h3>
          <div className="flex gap-2">
            <input
              type="text"
              value={nodeName}
              onChange={(e) => setNodeName(e.target.value)}
              placeholder="Node name"
              className="px-2 py-1 border rounded"
            />
            <button
              onClick={addNode}
              className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
            >
              Add
            </button>
            <button
              onClick={() => {
                nodes.map((node) =>
                  animate({
                    nodeId: node.id,
                    position: {
                      x: node.position.x + 100,
                      y: node.position.y + 50,
                    },
                    duration: 400,
                  })
                );
              }}
              className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
            >
              Shift Nodes
            </button>
          </div>
        </Panel>
      </ReactFlow>
    </div>
  );
}
